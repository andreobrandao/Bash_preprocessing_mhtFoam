/*--------------------------------*- C++ -*----------------------------------*|
| =========                 |                                                 |
| \      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \    /   O peration     | Version:  2312                                  |
|   \  /    A nd           | Website:  www.openfoam.com                      |
|    \/     M anipulation  |                                                 |
|*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    arch        "LSB;label=32;scalar=64";
    class       volScalarField;
    location    "0";
    object      ID;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField #codeStream
{
        codeInclude
        #{
                #include "fvCFD.H"
                #include "Ostream.H"
        #};

        codeOptions
        #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude 
        #};
        codeLibs
        #{
                -lmeshTools \
                -lfiniteVolume 
        #};

        code
        #{

        const IOdictionary& d = static_cast<const IOdictionary&>(dict);
        const fvMesh& mesh = refCast<const fvMesh>(d.db());
        const scalar pi = 3.141592653589793;
        // Tumores
        scalarField ID(mesh.nCells(), 0.);
        // Tumor 1
        scalar raiot1 = 0.005;
        scalar x1 = 0.045;
        scalar y1 = 0.045;
        scalar inclination_deg1= 0.000;
        scalar inclination_rad1 = inclination_deg1 * pi / 180.0;
        // Tumor 2
        scalar raiot2 = 0.005;
        scalar ee2 = 0.900;
        scalar be2 = raiot2*pow((1-pow(ee2,2)),0.25);
        scalar ae2 = pow(pow(be2,2)*(pow(1-pow(ee2,2),-1)),0.5);
        scalar x2 = 0.030;
        scalar y2 = 0.030;
        scalar inclination_deg2= 45.000;
        scalar inclination_rad2 = inclination_deg2 * pi / 180.0;
        // Tumor 3
        scalar raiot3 = 0.005;
        scalar ee3 = 0.900;
        scalar be3 = raiot3*pow((1-pow(ee3,2)),0.25);
        scalar ae3 = pow(pow(be3,2)*(pow(1-pow(ee3,2),-1)),0.5);
        scalar x3 = 0.060;
        scalar y3 = 0.060;
        scalar inclination_deg3= 45.000;
        scalar inclination_rad3 = inclination_deg3 * pi / 180.0;
        // Tumor 4
        scalar raiot4 = 0.005;
        scalar ee4 = 0.900;
        scalar be4 = raiot4*pow((1-pow(ee4,2)),0.25);
        scalar ae4 = pow(pow(be4,2)*(pow(1-pow(ee4,2),-1)),0.5);
        scalar x4 = 0.030;
        scalar y4 = 0.060;
        scalar inclination_deg4= 135.000;
        scalar inclination_rad4 = inclination_deg4 * pi / 180.0;
        // Tumor 5
        scalar raiot5 = 0.005;
        scalar ee5 = 0.900;
        scalar be5 = raiot5*pow((1-pow(ee5,2)),0.25);
        scalar ae5 = pow(pow(be5,2)*(pow(1-pow(ee5,2),-1)),0.5);
        scalar x5 = 0.060;
        scalar y5 = 0.030;
        scalar inclination_deg5= 135.000;
        scalar inclination_rad5 = inclination_deg5 * pi / 180.0;
        forAll(ID, i)
        {
                const scalar x = mesh.C()[i][0];
                const scalar y = mesh.C()[i][1];
                const scalar z = mesh.C()[i][2];
        scalar y_rot1 = (y - y1) * cos(inclination_rad1) - (x - x1) * sin(inclination_rad1);
        scalar x_rot1 = (y - y1) * sin(inclination_rad1) + (x - x1) * cos(inclination_rad1);
                if ( pow(y-y1,2) <= pow(raiot1,2) - pow(x-x1,2) )
                {
                        ID[i] = 1.;
                }
        scalar y_rot2 = (y - y2) * cos(inclination_rad2) - (x - x2) * sin(inclination_rad2);
        scalar x_rot2 = (y - y2) * sin(inclination_rad2) + (x - x2) * cos(inclination_rad2);
                if ( pow(y_rot2,2) <= ((1 - pow(x_rot2,2)/pow(ae2,2) )*pow(be2,2)) )
                {
                        ID[i] = 1.;
                }
        scalar y_rot3 = (y - y3) * cos(inclination_rad3) - (x - x3) * sin(inclination_rad3);
        scalar x_rot3 = (y - y3) * sin(inclination_rad3) + (x - x3) * cos(inclination_rad3);
                if ( pow(y_rot3,2) <= ((1 - pow(x_rot3,2)/pow(ae3,2) )*pow(be3,2)) )
                {
                        ID[i] = 1.;
                }
        scalar y_rot4 = (y - y4) * cos(inclination_rad4) - (x - x4) * sin(inclination_rad4);
        scalar x_rot4 = (y - y4) * sin(inclination_rad4) + (x - x4) * cos(inclination_rad4);
                if ( pow(y_rot4,2) <= ((1 - pow(x_rot4,2)/pow(ae4,2) )*pow(be4,2)) )
                {
                        ID[i] = 1.;
                }
        scalar y_rot5 = (y - y5) * cos(inclination_rad5) - (x - x5) * sin(inclination_rad5);
        scalar x_rot5 = (y - y5) * sin(inclination_rad5) + (x - x5) * cos(inclination_rad5);
                if ( pow(y_rot5,2) <= ((1 - pow(x_rot5,2)/pow(ae5,2) )*pow(be5,2)) )
                {
                        ID[i] = 1.;
                }
        }
        ID.writeEntry("", os);

        #};
};

boundaryField
{
    leftWall
    {
        type            fixedValue;
        value           uniform 0;
    }
    rightWall
    {
        type            fixedValue;
        value           uniform 0;
    }
    lowerWall
    {
        type            fixedValue;
        value           uniform 0;
    }
    upperWall
    {
        type            fixedValue;
        value           uniform 0;
    }
    defaultFaces
    {
        type            empty;
    }
}

// ************************************************************************* //
